# -*- coding: utf-8 -*-
"""medical-insurance-premium-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o3bHLieGGlgdUqwh-ZtBIBPvhqVAHybM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import pickle

#Data collection & analysis

#loading the data from csv file to pandas dataframe
df=pd.read_csv('insurance (1).csv')

#First 5 rows of the dataset
df.head()

# numbers of rows & columns
df.shape

# getting the information about the dataset
df.info()

"""We have 3 categorical features 
 * sex
 *smoker
 * region
"""

# checking for missing values
df.isnull().sum()

"""There are no null values.

**Data Analysis**
"""

# statistical measures of dataset
df.describe()

df.drop(columns='region',axis=1,inplace=True)

"""**Data Preprocessing**

1.Encoding the categorical features
"""

# 1. Encoding the sex column
df.replace({'sex':{'male':0,'female':1}},inplace=True)
# 2. Encoding 'smoker' column
df.replace({'smoker':{'yes':0,'no':1}},inplace=True)



df.head()

"""Splitting the features and target"""

X = df.drop(columns='charges',axis=1)
Y=df['charges']

print(Y)

"""Splitting the data into training data and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""**Linear Regression model**"""

# loading the linear regression model
regressor = LinearRegression()

regressor.fit(X_train,Y_train)

"""Model Evaluation"""

# Prediction on training data
training_data_prediction = regressor.predict(X_train)

# R sqaured value
r2_train = metrics.r2_score(Y_train,training_data_prediction)
print('R squared value:', r2_train)

# Prediction on testing data
testing_data_prediction = regressor.predict(X_test)

# R sqaured value
r2_test = metrics.r2_score(Y_test,testing_data_prediction)
print('R squared value:', r2_test)

"""Building a Predictive system"""

input_data = (25,0,26.22,0,1)
# changing input data  to a numpy array

input_data_as_numpy_array = np.asarray(input_data)

#reshape the array

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction =regressor.predict(input_data_reshaped)
print('The insurance cost is INR',prediction[0])

# The actual value  is 2721.3208 INR , where our predicted value is almost equal to actual value.

pickle.dump(regressor, open('insurance.pkl', 'wb'))

